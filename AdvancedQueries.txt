-- j. Provide a list of member names, along with the total combined amount of all items they have rented out. 
SELECT M.MemberID, M.FName, M.LName, COALESCE(COUNT(R.RentalID), 0) AS RentalCount -- in the case that member has no rentals, count = 0
FROM MEMBERS M
LEFT JOIN RENTALS R ON R.MemberID = M.MemberID
GROUP BY M.MemberID, M.FName, M.LName;


-- k. Provide a list of member names and email addresses for members who have rented more equipment than the average member. 
SELECT MEMBERS.FName, MEMBERS.LName, MEMBERS.Email
FROM MEMBERS
LEFT JOIN RENTALS ON MEMBERS.MemberID = RENTALS.MemberID
GROUP BY MEMBERS.MemberID
HAVING COUNT(*) > (
    SELECT AVG(NumRented) AvgRents
    FROM (
        SELECT COUNT(*)NumRented
        FROM RENTALS
        GROUP BY RENTALS.MemberID
    ) AS RENTAL_COUNT
);



-- l. Provide a list of the equipment in the database and associated total copies rented to members,
--    sorted from the equipment that has been rented the most to the equipment that has been rented the least.
SELECT INVENTORY.Name, COALESCE(COUNT(R.RENTALID), 0) AS RentalCount
FROM INVENTORY
LEFT JOIN RENTALS R ON INVENTORY.ItemID = R.ItemID
GROUP BY INVENTORY.Name
ORDER BY RentalCount DESC;

--m. Provide a list of the drones in the database and the total number of miles flown, sorted from the ones that have been delivered the highest number of items to the ones delivered the lowest.
SELECT DRONES.DroneID, SUM(SHIPMENTS.Distance) AS TotalMilesFlown, COUNT(SHIPMENTS.DeliveryID) AS TotalItemsDelivered
FROM DRONES
LEFT JOIN SHIPMENTS ON DRONES.DroneID = SHIPMENTS.DroneID
GROUP BY DRONES.DroneID
ORDER BY TotalItemsDelivered DESC;
